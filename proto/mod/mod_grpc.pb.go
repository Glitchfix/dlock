// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: mod/mod.proto

package mod

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Mod_Metadata_FullMethodName = "/mod.Mod/Metadata"
	Mod_Filter_FullMethodName   = "/mod.Mod/Filter"
	Mod_Execute_FullMethodName  = "/mod.Mod/Execute"
	Mod_Metric_FullMethodName   = "/mod.Mod/Metric"
)

// ModClient is the client API for Mod service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ModClient interface {
	Metadata(ctx context.Context, in *MetadataRequest, opts ...grpc.CallOption) (*MetadataResponse, error)
	// Filter a node
	Filter(ctx context.Context, in *FilterRequest, opts ...grpc.CallOption) (*FilterResponse, error)
	// Execute a node
	Execute(ctx context.Context, in *ExecuteRequest, opts ...grpc.CallOption) (*ExecuteResponse, error)
	// Metric a node
	Metric(ctx context.Context, in *MetricRequest, opts ...grpc.CallOption) (*MetricResponse, error)
}

type modClient struct {
	cc grpc.ClientConnInterface
}

func NewModClient(cc grpc.ClientConnInterface) ModClient {
	return &modClient{cc}
}

func (c *modClient) Metadata(ctx context.Context, in *MetadataRequest, opts ...grpc.CallOption) (*MetadataResponse, error) {
	out := new(MetadataResponse)
	err := c.cc.Invoke(ctx, Mod_Metadata_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modClient) Filter(ctx context.Context, in *FilterRequest, opts ...grpc.CallOption) (*FilterResponse, error) {
	out := new(FilterResponse)
	err := c.cc.Invoke(ctx, Mod_Filter_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modClient) Execute(ctx context.Context, in *ExecuteRequest, opts ...grpc.CallOption) (*ExecuteResponse, error) {
	out := new(ExecuteResponse)
	err := c.cc.Invoke(ctx, Mod_Execute_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modClient) Metric(ctx context.Context, in *MetricRequest, opts ...grpc.CallOption) (*MetricResponse, error) {
	out := new(MetricResponse)
	err := c.cc.Invoke(ctx, Mod_Metric_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ModServer is the server API for Mod service.
// All implementations must embed UnimplementedModServer
// for forward compatibility
type ModServer interface {
	Metadata(context.Context, *MetadataRequest) (*MetadataResponse, error)
	// Filter a node
	Filter(context.Context, *FilterRequest) (*FilterResponse, error)
	// Execute a node
	Execute(context.Context, *ExecuteRequest) (*ExecuteResponse, error)
	// Metric a node
	Metric(context.Context, *MetricRequest) (*MetricResponse, error)
	mustEmbedUnimplementedModServer()
}

// UnimplementedModServer must be embedded to have forward compatible implementations.
type UnimplementedModServer struct {
}

func (UnimplementedModServer) Metadata(context.Context, *MetadataRequest) (*MetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Metadata not implemented")
}
func (UnimplementedModServer) Filter(context.Context, *FilterRequest) (*FilterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Filter not implemented")
}
func (UnimplementedModServer) Execute(context.Context, *ExecuteRequest) (*ExecuteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Execute not implemented")
}
func (UnimplementedModServer) Metric(context.Context, *MetricRequest) (*MetricResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Metric not implemented")
}
func (UnimplementedModServer) mustEmbedUnimplementedModServer() {}

// UnsafeModServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ModServer will
// result in compilation errors.
type UnsafeModServer interface {
	mustEmbedUnimplementedModServer()
}

func RegisterModServer(s grpc.ServiceRegistrar, srv ModServer) {
	s.RegisterService(&Mod_ServiceDesc, srv)
}

func _Mod_Metadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModServer).Metadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mod_Metadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModServer).Metadata(ctx, req.(*MetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mod_Filter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModServer).Filter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mod_Filter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModServer).Filter(ctx, req.(*FilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mod_Execute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModServer).Execute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mod_Execute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModServer).Execute(ctx, req.(*ExecuteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mod_Metric_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetricRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModServer).Metric(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mod_Metric_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModServer).Metric(ctx, req.(*MetricRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Mod_ServiceDesc is the grpc.ServiceDesc for Mod service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Mod_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mod.Mod",
	HandlerType: (*ModServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Metadata",
			Handler:    _Mod_Metadata_Handler,
		},
		{
			MethodName: "Filter",
			Handler:    _Mod_Filter_Handler,
		},
		{
			MethodName: "Execute",
			Handler:    _Mod_Execute_Handler,
		},
		{
			MethodName: "Metric",
			Handler:    _Mod_Metric_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mod/mod.proto",
}
