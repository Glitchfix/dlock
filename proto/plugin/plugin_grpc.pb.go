// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: plugin/plugin.proto

package plugin

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DLock_Lock_FullMethodName   = "/plugin.DLock/Lock"
	DLock_Unlock_FullMethodName = "/plugin.DLock/Unlock"
)

// DLockClient is the client API for DLock service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DLockClient interface {
	Lock(ctx context.Context, in *LockRequest, opts ...grpc.CallOption) (DLock_LockClient, error)
	Unlock(ctx context.Context, in *LockRequest, opts ...grpc.CallOption) (DLock_UnlockClient, error)
}

type dLockClient struct {
	cc grpc.ClientConnInterface
}

func NewDLockClient(cc grpc.ClientConnInterface) DLockClient {
	return &dLockClient{cc}
}

func (c *dLockClient) Lock(ctx context.Context, in *LockRequest, opts ...grpc.CallOption) (DLock_LockClient, error) {
	stream, err := c.cc.NewStream(ctx, &DLock_ServiceDesc.Streams[0], DLock_Lock_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &dLockLockClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DLock_LockClient interface {
	Recv() (*LockResponse, error)
	grpc.ClientStream
}

type dLockLockClient struct {
	grpc.ClientStream
}

func (x *dLockLockClient) Recv() (*LockResponse, error) {
	m := new(LockResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dLockClient) Unlock(ctx context.Context, in *LockRequest, opts ...grpc.CallOption) (DLock_UnlockClient, error) {
	stream, err := c.cc.NewStream(ctx, &DLock_ServiceDesc.Streams[1], DLock_Unlock_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &dLockUnlockClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DLock_UnlockClient interface {
	Recv() (*LockResponse, error)
	grpc.ClientStream
}

type dLockUnlockClient struct {
	grpc.ClientStream
}

func (x *dLockUnlockClient) Recv() (*LockResponse, error) {
	m := new(LockResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DLockServer is the server API for DLock service.
// All implementations must embed UnimplementedDLockServer
// for forward compatibility
type DLockServer interface {
	Lock(*LockRequest, DLock_LockServer) error
	Unlock(*LockRequest, DLock_UnlockServer) error
	mustEmbedUnimplementedDLockServer()
}

// UnimplementedDLockServer must be embedded to have forward compatible implementations.
type UnimplementedDLockServer struct {
}

func (UnimplementedDLockServer) Lock(*LockRequest, DLock_LockServer) error {
	return status.Errorf(codes.Unimplemented, "method Lock not implemented")
}
func (UnimplementedDLockServer) Unlock(*LockRequest, DLock_UnlockServer) error {
	return status.Errorf(codes.Unimplemented, "method Unlock not implemented")
}
func (UnimplementedDLockServer) mustEmbedUnimplementedDLockServer() {}

// UnsafeDLockServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DLockServer will
// result in compilation errors.
type UnsafeDLockServer interface {
	mustEmbedUnimplementedDLockServer()
}

func RegisterDLockServer(s grpc.ServiceRegistrar, srv DLockServer) {
	s.RegisterService(&DLock_ServiceDesc, srv)
}

func _DLock_Lock_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(LockRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DLockServer).Lock(m, &dLockLockServer{stream})
}

type DLock_LockServer interface {
	Send(*LockResponse) error
	grpc.ServerStream
}

type dLockLockServer struct {
	grpc.ServerStream
}

func (x *dLockLockServer) Send(m *LockResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _DLock_Unlock_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(LockRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DLockServer).Unlock(m, &dLockUnlockServer{stream})
}

type DLock_UnlockServer interface {
	Send(*LockResponse) error
	grpc.ServerStream
}

type dLockUnlockServer struct {
	grpc.ServerStream
}

func (x *dLockUnlockServer) Send(m *LockResponse) error {
	return x.ServerStream.SendMsg(m)
}

// DLock_ServiceDesc is the grpc.ServiceDesc for DLock service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DLock_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "plugin.DLock",
	HandlerType: (*DLockServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Lock",
			Handler:       _DLock_Lock_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Unlock",
			Handler:       _DLock_Unlock_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "plugin/plugin.proto",
}
